// Code generated by generate-validators; DO NOT EDIT.
package rules

import (
	"fmt"
	"go/ast"
	"strings"

	"github.com/gostaticanalysis/codegen"

	"github.com/sivchari/govalid/internal/validator"
)

type {{.MarkerName}}Validator struct {
	pass       *codegen.Pass
	field      *ast.Field
	structName string
	ruleName   string
	parentPath string
}

var _ validator.Validator = (*{{.MarkerName}}Validator)(nil)

const {{.MarkerName}}Key = "%s-{{.MarkerName}}"

func (v *{{.MarkerName}}Validator) Validate() string {
	// TODO: Implement validation logic
	// Return a Go expression that evaluates to true when validation fails
    return ""
}

func (v *{{.MarkerName}}Validator) FieldName() string {
	return v.field.Names[0].Name
}

func (v *{{.MarkerName}}Validator) FieldPath() validator.FieldPath {
	return validator.NewFieldPath(v.structName, v.parentPath, v.FieldName())
}

func (v *{{.MarkerName}}Validator) Err() string {
	key := fmt.Sprintf({{.MarkerName}}Key, v.FieldPath().WithoutDots())

	if validator.GeneratorMemory[key] {
		return ""
	}

	validator.GeneratorMemory[key] = true

	const errTemplate = `
	  // [@ERRVARIABLE] is returned when the [@FIELD] fails {{.MarkerName}} validation.
	  [@ERRVARIABLE] = govaliderrors.ValidationError{Reason:"{{if .ErrorMessage}}{{.ErrorMessage}}{{else}}field [@FIELD] failed {{.MarkerName}} validation{{end}}",Path:"[@PATH]",Type:"[@TYPE]"}
	`

	replacer := strings.NewReplacer(
		"[@ERRVARIABLE]", v.ErrVariable(),
		"[@FIELD]", v.FieldName(),
		"[@PATH]", v.FieldPath().String(),
		"[@TYPE]", v.ruleName,
	)

	return replacer.Replace(errTemplate)
}

func (v *{{.MarkerName}}Validator) ErrVariable() string {
	return strings.ReplaceAll("Err[@PATH]{{.StructName}}Validation", "[@PATH]", v.FieldPath().WithoutDots())
}

func (v *{{.MarkerName}}Validator) Imports() []string {
	// TODO: Add any required imports
	return []string{}
}

// Validate{{.StructName}} creates a new {{.MarkerName}} validator for the given field.
func Validate{{.StructName}}(pass *codegen.Pass, field *ast.Field, expressions map[string]string, structName, ruleName string, parentPath string) validator.Validator {
	fieldName := field.Names[0].Name
	fieldPath := validator.NewFieldPath(structName, parentPath, fieldName)
	validator.GeneratorMemory[fmt.Sprintf({{.MarkerName}}Key, fieldPath.WithoutDots())] = false

	return &{{.MarkerName}}Validator{
		pass:       pass,
		field:      field,
		structName: structName,
		ruleName:   ruleName,
		parentPath: parentPath,
	}
}
