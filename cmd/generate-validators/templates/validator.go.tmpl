// Code generated by generate-validators; DO NOT EDIT.
package rules

import (
	"fmt"
	"go/ast"
	"strings"

	"github.com/gostaticanalysis/codegen"

	"github.com/sivchari/govalid/internal/validator"
	"github.com/sivchari/govalid/internal/validator/registry"
)

type {{.MarkerName}}Validator struct {
	pass       *codegen.Pass
	field      *ast.Field
	structName string
	ruleName   string
	parentPath string
}

var _ validator.Validator = (*{{.MarkerName}}Validator)(nil)

const {{.MarkerName}}Key = "%s-{{.MarkerName}}"

func (v *{{.MarkerName}}Validator) Validate() string {
	// TODO: Implement validation logic
	// Return a Go expression that evaluates to true when validation fails
    return ""
}

func (v *{{.MarkerName}}Validator) FieldName() string {
	return v.field.Names[0].Name
}

func (v *{{.MarkerName}}Validator) FieldPath() validator.FieldPath {
	return validator.NewFieldPath(v.structName, v.parentPath, v.FieldName())
}

func (v *{{.MarkerName}}Validator) Err() string {
	key := fmt.Sprintf({{.MarkerName}}Key, v.FieldPath().CleanedPath())

	if validator.GeneratorMemory[key] {
		return ""
	}

	validator.GeneratorMemory[key] = true

  const deprecationNoticeTemplate = `
		// Deprecated: Use [@ERRVARIABLE]
		//
		// [@LEGACYERRVAR] is deprecated and is kept for compatibility purpose.
		[@LEGACYERRVAR] = [@ERRVARIABLE]
  `

	const errTemplate = `
	  // [@ERRVARIABLE] is returned when the [@FIELD] fails {{.MarkerName}} validation.
	  [@ERRVARIABLE] = govaliderrors.ValidationError{Reason:"{{if .ErrorMessage}}{{.ErrorMessage}}{{else}}field [@FIELD] failed {{.MarkerName}} validation{{end}}",Path:"[@PATH]",Type:"[@TYPE]"}
	`

  legacyErrVarName := fmt.Sprintf("Err%s%s{{.StructName}}Validation", v.structName, v.FieldName())
	currentErrVarName := v.ErrVariable()

	replacer := strings.NewReplacer(
        "[@ERRVARIABLE]", currentErrVarName,
		"[@LEGACYERRVAR]", legacyErrVarName,
		"[@FIELD]", v.FieldName(),
		"[@PATH]", v.FieldPath().String(),
		"[@TYPE]", v.ruleName,
	)

  if currentErrVarName != legacyErrVarName {
		return replacer.Replace(deprecationNoticeTemplate + errTemplate)
	}

	return replacer.Replace(errTemplate)
}

func (v *{{.MarkerName}}Validator) ErrVariable() string {
	return strings.ReplaceAll("Err[@PATH]{{.StructName}}Validation", "[@PATH]", v.FieldPath().CleanedPath())
}

func (v *{{.MarkerName}}Validator) Imports() []string {
	// TODO: Add any required imports
	return []string{}
}

// Validate{{.StructName}} creates a new {{.MarkerName}} validator for the given field.
func Validate{{.StructName}}(input registry.ValidatorInput) validator.Validator {
	return &{{.MarkerName}}Validator{
		pass:       input.Pass,
		field:      input.Field,
		structName: input.StructName,
		ruleName:   input.RuleName,
		parentPath: input.ParentPath,
	}
}
