// Package rules implements validation rules for fields in structs.
package rules

import (
	"fmt"
	"go/ast"
	"go/types"
	"strings"

	"github.com/gostaticanalysis/codegen"

	"github.com/sivchari/govalid/internal/validator"
)

type {{.MarkerName}}Validator struct {
	pass       *codegen.Pass
	field      *ast.Field
	structName string
	{{if .HasParameter}}{{.ParameterName}} string{{end}}
}

var _ validator.Validator = (*{{.MarkerName}}Validator)(nil)

const {{.MarkerName}}Key = "%s-{{.MarkerName}}"

func (v *{{.MarkerName}}Validator) Validate() string {
	// TODO: Implement validation logic
	// Return a Go expression that evaluates to true when validation fails
	return fmt.Sprintf("!isValid{{.StructName}}(t.%s{{if .HasParameter}}, v.{{.ParameterName}}{{end}})", v.FieldName())
}

func (v *{{.MarkerName}}Validator) FieldName() string {
	return v.field.Names[0].Name
}

func (v *{{.MarkerName}}Validator) Err() string {
	key := fmt.Sprintf({{.MarkerName}}Key, v.structName+v.FieldName())
	if validator.GeneratorMemory[key] {
		return ""
	}

	validator.GeneratorMemory[key] = true

	return strings.ReplaceAll(` + "`" + `
	// Err@{{.StructName}}Validation is returned when the @ fails {{.MarkerName}} validation.
	Err@{{.StructName}}Validation = errors.New("{{if .ErrorMessage}}{{.ErrorMessage}}{{else}}field @ failed {{.MarkerName}} validation{{end}}")` + "`" + `, "@", v.structName+v.FieldName())
}

func (v *{{.MarkerName}}Validator) ErrVariable() string {
	return strings.ReplaceAll("Err@{{.StructName}}Validation", "@", v.structName+v.FieldName())
}

func (v *{{.MarkerName}}Validator) Imports() []string {
	// TODO: Add any required imports
	return []string{}
}

// Validate{{.StructName}} creates a new {{.MarkerName}} validator for the given field.
func Validate{{.StructName}}(pass *codegen.Pass, field *ast.Field, expressions map[string]string, structName string) validator.Validator {
	typ := pass.TypesInfo.TypeOf(field.Type)

	// Type checking
{{.TypeCheckCode}}

	validator.GeneratorMemory[fmt.Sprintf({{.MarkerName}}Key, structName+field.Names[0].Name)] = false

	return &{{.MarkerName}}Validator{
		pass:       pass,
		field:      field,
		structName: structName,
		{{if .HasParameter}}{{.ParameterName}}: expressions["value"], // TODO: Parse parameter from expressions{{end}}
	}
}