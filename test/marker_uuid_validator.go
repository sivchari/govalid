// Code generated by govalid; DO NOT EDIT.
package test

import (
	"errors"
)

var (
	// ErrNilUUID is returned when the UUID is nil.
	ErrNilUUID = errors.New("input UUID is nil")

	// isValidUUID validates UUID format manually for maximum performance
	// Validates RFC 4122 format: 8-4-4-4-12 hex digits with hyphens
	isValidUUID = func(s string) bool {
		// Check length: 36 characters (32 hex + 4 hyphens)
		if len(s) != 36 {
			return false
		}

		// Check hyphen positions: 8-4-4-4-12
		if s[8] != '-' || s[13] != '-' || s[18] != '-' || s[23] != '-' {
			return false
		}

		// Check hex characters and version/variant
		for i := 0; i < 36; i++ {
			if i == 8 || i == 13 || i == 18 || i == 23 {
				continue // skip hyphens
			}

			c := s[i]
			if !((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F')) {
				return false
			}
		}

		// Check version (position 14): must be 1-5
		version := s[14]
		if version < '1' || version > '5' {
			return false
		}

		// Check variant (position 19): must be 8, 9, A, B (case insensitive)
		variant := s[19]
		if !(variant == '8' || variant == '9' ||
			variant == 'A' || variant == 'a' ||
			variant == 'B' || variant == 'b') {
			return false
		}

		return true
	}
	// ErrUUIDUUIDUUIDValidation is the error returned when the field is not a valid UUID.
	ErrUUIDUUIDUUIDValidation = errors.New("field UUIDUUID must be a valid UUID")
)

func ValidateUUID(t *UUID) error {
	if t == nil {
		return ErrNilUUID
	}

	if !isValidUUID(t.UUID) {
		return ErrUUIDUUIDUUIDValidation
	}

	return nil
}
