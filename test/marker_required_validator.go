// Code generated by govalid; DO NOT EDIT.
package test

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
)

var (
	// ErrNilRequired is returned when the Required is nil.
	ErrNilRequired = errors.New("input Required is nil")

	// ErrRequiredNameRequiredValidation is returned when the Name is required but not provided.
	ErrRequiredNameRequiredValidation = govaliderrors.ValidationError{Reason: "field Name is required", Path: "Required.Name", Type: "required"}

	// ErrRequiredAgeRequiredValidation is returned when the Age is required but not provided.
	ErrRequiredAgeRequiredValidation = govaliderrors.ValidationError{Reason: "field Age is required", Path: "Required.Age", Type: "required"}

	// ErrRequiredItemsRequiredValidation is returned when the Items is required but not provided.
	ErrRequiredItemsRequiredValidation = govaliderrors.ValidationError{Reason: "field Items is required", Path: "Required.Items", Type: "required"}
)

func ValidateRequired(t *Required) error {
	if t == nil {
		return ErrNilRequired
	}

	var errs govaliderrors.ValidationErrors

	if t.Name == "" {
		err := ErrRequiredNameRequiredValidation
		err.Value = t.Name
		errs = append(errs, err)
	}

	if t.Age == 0 {
		err := ErrRequiredAgeRequiredValidation
		err.Value = t.Age
		errs = append(errs, err)
	}

	if t.Items == nil {
		err := ErrRequiredItemsRequiredValidation
		err.Value = t.Items
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
