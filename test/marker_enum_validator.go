// Code generated by govalid; DO NOT EDIT.
package test

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
)

var (
	// ErrNilEnum is returned when the Enum is nil.
	ErrNilEnum                = errors.New("input Enum is nil")
	ErrEnumRoleEnumValidation = govaliderrors.ValidationError{}

	ErrEnumLevelEnumValidation = govaliderrors.ValidationError{}

	ErrEnumUserRoleEnumValidation = govaliderrors.ValidationError{}

	ErrEnumPriorityEnumValidation = govaliderrors.ValidationError{}
)

func ValidateEnum(t *Enum) error {
	if t == nil {
		return ErrNilEnum
	}

	var errs govaliderrors.ValidationErrors

	if t.Role != "admin" && t.Role != "user" && t.Role != "guest" {
		err := ErrEnumRoleEnumValidation
		err.Value = t.Role
		errs = append(errs, err)
	}

	if t.Level != 1 && t.Level != 2 && t.Level != 3 {
		err := ErrEnumLevelEnumValidation
		err.Value = t.Level
		errs = append(errs, err)
	}

	if t.UserRole != "manager" && t.UserRole != "developer" && t.UserRole != "tester" {
		err := ErrEnumUserRoleEnumValidation
		err.Value = t.UserRole
		errs = append(errs, err)
	}

	if t.Priority != 10 && t.Priority != 20 && t.Priority != 30 {
		err := ErrEnumPriorityEnumValidation
		err.Value = t.Priority
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
