// Code generated by govalid; DO NOT EDIT.
package test

import (
	"errors"
)

var (
	// ErrNilEnum is returned when the Enum is nil.
	ErrNilEnum = errors.New("input Enum is nil")

	// ErrEnumRoleEnumValidation is the error returned when the value is not in the allowed enum values [admin, user, guest].
	ErrEnumRoleEnumValidation = errors.New("field EnumRole must be one of [admin, user, guest]")

	// ErrEnumLevelEnumValidation is the error returned when the value is not in the allowed enum values [1, 2, 3].
	ErrEnumLevelEnumValidation = errors.New("field EnumLevel must be one of [1, 2, 3]")

	// ErrEnumUserRoleEnumValidation is the error returned when the value is not in the allowed enum values [manager, developer, tester].
	ErrEnumUserRoleEnumValidation = errors.New("field EnumUserRole must be one of [manager, developer, tester]")

	// ErrEnumPriorityEnumValidation is the error returned when the value is not in the allowed enum values [10, 20, 30].
	ErrEnumPriorityEnumValidation = errors.New("field EnumPriority must be one of [10, 20, 30]")
)

func ValidateEnum(t *Enum) error {
	if t == nil {
		return ErrNilEnum
	}

	if t.Role != "admin" && t.Role != "user" && t.Role != "guest" {
		return ErrEnumRoleEnumValidation
	}

	if t.Level != 1 && t.Level != 2 && t.Level != 3 {
		return ErrEnumLevelEnumValidation
	}

	if t.UserRole != "manager" && t.UserRole != "developer" && t.UserRole != "tester" {
		return ErrEnumUserRoleEnumValidation
	}

	if t.Priority != 10 && t.Priority != 20 && t.Priority != 30 {
		return ErrEnumPriorityEnumValidation
	}

	return nil
}
