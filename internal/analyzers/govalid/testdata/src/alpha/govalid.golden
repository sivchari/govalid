// Code generated by govalid; DO NOT EDIT.
package alpha

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
	"github.com/sivchari/govalid/validation/validationhelper"
)

var (
	// ErrNilAlpha is returned when the Alpha is nil.
	ErrNilAlpha = errors.New("input Alpha is nil")

	// ErrAlphaFirstNameAlphaValidation is the error returned when field FirstName is not alphabetic.
	ErrAlphaFirstNameAlphaValidation = govaliderrors.ValidationError{Reason: "field FirstName must be alphabetic", Path: "Alpha.AlphaFirstName"}

	// ErrAlphaLastNameAlphaValidation is the error returned when field LastName is not alphabetic.
	ErrAlphaLastNameAlphaValidation = govaliderrors.ValidationError{Reason: "field LastName must be alphabetic", Path: "Alpha.AlphaLastName"}

	// ErrAlphaCountryCodeAlphaValidation is the error returned when field CountryCode is not alphabetic.
	ErrAlphaCountryCodeAlphaValidation = govaliderrors.ValidationError{Reason: "field CountryCode must be alphabetic", Path: "Alpha.AlphaCountryCode"}
)

func ValidateAlpha(t *Alpha) error {
	if t == nil {
		return ErrNilAlpha
	}

	var errs govaliderrors.ValidationErrors

	if !validationhelper.IsValidAlpha(t.FirstName) {
		err := ErrAlphaFirstNameAlphaValidation
		err.Type = "alpha"
		err.Value = t.FirstName
		errs = append(errs, err)
	}

	if !validationhelper.IsValidAlpha(t.LastName) {
		err := ErrAlphaLastNameAlphaValidation
		err.Type = "alpha"
		err.Value = t.LastName
		errs = append(errs, err)
	}

	if !validationhelper.IsValidAlpha(t.CountryCode) {
		err := ErrAlphaCountryCodeAlphaValidation
		err.Type = "alpha"
		err.Value = t.CountryCode
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
