// Code generated by govalid; DO NOT EDIT.
package gte

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
)

var (
	// ErrNilGTE is returned when the GTE is nil.
	ErrNilGTE = errors.New("input GTE is nil")

	// ErrGTEAgeGTEValidation is the error returned when the value of the field is less than 18.
	ErrGTEAgeGTEValidation = govaliderrors.ValidationError{Reason: "field Age must be greater than or equal to 18", Path: "GTE.Age", Type: "gte"}

	// ErrGTEScoreGTEValidation is the error returned when the value of the field is less than 0.
	ErrGTEScoreGTEValidation = govaliderrors.ValidationError{Reason: "field Score must be greater than or equal to 0", Path: "GTE.Score", Type: "gte"}

	// ErrGTEValueGTEValidation is the error returned when the value of the field is less than 100.
	ErrGTEValueGTEValidation = govaliderrors.ValidationError{Reason: "field Value must be greater than or equal to 100", Path: "GTE.Value", Type: "gte"}
)

func ValidateGTE(t *GTE) error {
	if t == nil {
		return ErrNilGTE
	}

	var errs govaliderrors.ValidationErrors

	if !(t.Age >= 18) {
		err := ErrGTEAgeGTEValidation
		err.Value = t.Age
		errs = append(errs, err)
	}

	if !(t.Score >= 0) {
		err := ErrGTEScoreGTEValidation
		err.Value = t.Score
		errs = append(errs, err)
	}

	{
		t := t.Struct

		if !(t.Value >= 100) {
			err := ErrGTEValueGTEValidation
			err.Value = t.Value
			errs = append(errs, err)
		}

	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
