// Code generated by govalid; DO NOT EDIT.
package multiple

import (
	"errors"

	"github.com/sivchari/govalid"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
	"github.com/sivchari/govalid/validation/validationhelper"
)

var (
	// ErrNilMultiple is returned when the Multiple is nil.
	ErrNilMultiple = errors.New("input Multiple is nil")

	// ErrMultipleNameRequiredValidation is returned when the Name is required but not provided.
	ErrMultipleNameRequiredValidation = govaliderrors.ValidationError{Reason: "field Name is required", Path: "Multiple.Name", Type: "required"}

	// ErrMultipleEmailRequiredValidation is returned when the Email is required but not provided.
	ErrMultipleEmailRequiredValidation = govaliderrors.ValidationError{Reason: "field Email is required", Path: "Multiple.Email", Type: "required"}

	// ErrMultipleEmailEmailValidation is the error returned when the field is not a valid email address.
	ErrMultipleEmailEmailValidation = govaliderrors.ValidationError{Reason: "field Email must be a valid email address", Path: "Multiple.Email", Type: "email"}

	// ErrMultipleAgeRequiredValidation is returned when the Age is required but not provided.
	ErrMultipleAgeRequiredValidation = govaliderrors.ValidationError{Reason: "field Age is required", Path: "Multiple.Age", Type: "required"}

	// ErrMultipleAgeGTEValidation is the error returned when the value of the field is less than 18.
	ErrMultipleAgeGTEValidation = govaliderrors.ValidationError{Reason: "field Age must be greater than or equal to 18", Path: "Multiple.Age", Type: "gte"}
)

func ValidateMultiple(t *Multiple) error {
	if t == nil {
		return ErrNilMultiple
	}

	var errs govaliderrors.ValidationErrors

	if t.Name == "" {
		err := ErrMultipleNameRequiredValidation
		err.Value = t.Name
		errs = append(errs, err)
	}

	if t.Email == "" {
		err := ErrMultipleEmailRequiredValidation
		err.Value = t.Email
		errs = append(errs, err)
	}

	if !validationhelper.IsValidEmail(t.Email) {
		err := ErrMultipleEmailEmailValidation
		err.Value = t.Email
		errs = append(errs, err)
	}

	if t.Age == 0 {
		err := ErrMultipleAgeRequiredValidation
		err.Value = t.Age
		errs = append(errs, err)
	}

	if !(t.Age >= 18) {
		err := ErrMultipleAgeGTEValidation
		err.Value = t.Age
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}

var _ govalid.Validator = (*Multiple)(nil)

func (t *Multiple) Validate() error {
	return ValidateMultiple(t)
}
