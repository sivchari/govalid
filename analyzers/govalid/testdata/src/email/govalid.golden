// Code generated by govalid; DO NOT EDIT.
package email

import (
	"errors"
	"strings"
)

var (
	// ErrNilEmail is returned when the Email is nil.
	ErrNilEmail = errors.New("input Email is nil")

	// isValidEmail validates email format manually for maximum performance
	// Validates basic email structure: local@domain format
	isValidEmail = func(email string) bool {
		// Basic length check
		if len(email) < 5 || len(email) > 254 { // a@b.c = 5 chars minimum, RFC 5321 limit
			return false
		}

		// Must contain exactly one @
		atIndex := -1
		atCount := 0
		for i, c := range email {
			if c == '@' {
				atIndex = i
				atCount++
			}
		}
		if atCount != 1 || atIndex <= 0 || atIndex >= len(email)-1 {
			return false
		}

		// Validate local part (before @)
		local := email[:atIndex]
		if len(local) == 0 || len(local) > 64 { // RFC 5321 limit
			return false
		}

		// Check for consecutive dots or leading/trailing dots
		if local[0] == '.' || local[len(local)-1] == '.' {
			return false
		}
		for i := 0; i < len(local)-1; i++ {
			if local[i] == '.' && local[i+1] == '.' {
				return false
			}
		}

		// Check allowed characters in local part
		for _, c := range local {
			if !((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||
				(c >= '0' && c <= '9') || c == '.' || c == '_' || c == '-' ||
				c == '+' || c == '=' || c == '!' || c == '#' || c == '$' ||
				c == '%' || c == '&' || c == '\'' || c == '*' || c == '/' ||
				c == '?' || c == '^' || c == 96 || c == '{' || c == '|' ||
				c == '}' || c == '~') { // c == 96 is backtick
				return false
			}
		}

		// Validate domain part (after @)
		domain := email[atIndex+1:]
		if len(domain) == 0 || len(domain) > 253 { // RFC 1035 limit
			return false
		}

		// Must contain at least one dot
		if !strings.Contains(domain, ".") {
			return false
		}

		// Cannot start or end with dot or hyphen
		if domain[0] == '.' || domain[len(domain)-1] == '.' ||
			domain[0] == '-' || domain[len(domain)-1] == '-' {
			return false
		}

		// Split domain into labels and validate each
		labels := strings.Split(domain, ".")
		if len(labels) < 2 {
			return false
		}

		for _, label := range labels {
			if len(label) == 0 || len(label) > 63 { // RFC 1035 limit
				return false
			}

			// Cannot start or end with hyphen
			if label[0] == '-' || label[len(label)-1] == '-' {
				return false
			}

			// Check allowed characters (alphanumeric + hyphen)
			for _, c := range label {
				if !((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') ||
					(c >= '0' && c <= '9') || c == '-') {
					return false
				}
			}
		}

		return true
	}
	// ErrEmailEmailValidation is the error returned when the field is not a valid email address.
	ErrEmailEmailValidation = errors.New("field Email must be a valid email address")
)

func ValidateEmail(t *Email) error {
	if t == nil {
		return ErrNilEmail
	}

	if !isValidEmail(t.Email) {
		return ErrEmailEmailValidation
	}

	return nil
}
