// Code generated by govalid; DO NOT EDIT.
package lte

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
)

var (
	// ErrNilLTE is returned when the LTE is nil.
	ErrNilLTE = errors.New("input LTE is nil")

	// ErrLTEAgeLTEValidation is the error returned when the value of the field is greater than %s.
	ErrLTEAgeLTEValidation = govaliderrors.ValidationError{Reason: "field LTEAge must be less than or equal to %s", Path: "LTE.Age"}

	// ErrLTEScoreLTEValidation is the error returned when the value of the field is greater than %s.
	ErrLTEScoreLTEValidation = govaliderrors.ValidationError{Reason: "field LTEScore must be less than or equal to %s", Path: "LTE.Score"}

	// ErrLTEValueLTEValidation is the error returned when the value of the field is greater than %s.
	ErrLTEValueLTEValidation = govaliderrors.ValidationError{Reason: "field LTEValue must be less than or equal to %s", Path: "LTE.Value"}
)

func ValidateLTE(t *LTE) error {
	if t == nil {
		return ErrNilLTE
	}

	var errs govaliderrors.ValidationErrors

	if !(t.Age <= 100) {
		err := ErrLTEAgeLTEValidation
		err.Type = "LTE"
		err.Value = t.Age
		errs = append(errs, err)
	}

	if !(t.Score <= 10.5) {
		err := ErrLTEScoreLTEValidation
		err.Type = "LTE"
		err.Value = t.Score
		errs = append(errs, err)
	}

	{
		t := t.Struct

		if !(t.Value <= 50) {
			err := ErrLTEValueLTEValidation
			err.Type = "LTE"
			err.Value = t.Value
			errs = append(errs, err)
		}

	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
