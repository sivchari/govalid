// Code generated by govalid; DO NOT EDIT.
package required

import (
	"errors"
)

var (
	// ErrNilRequired is returned when the Required is nil.
	ErrNilRequired = errors.New("input Required is nil")

	// ErrRequiredStringRequiredValidation is returned when the RequiredString is required but not provided.
	ErrRequiredStringRequiredValidation = errors.New("field RequiredString is required")

	// ErrRequiredIntRequiredValidation is returned when the RequiredInt is required but not provided.
	ErrRequiredIntRequiredValidation = errors.New("field RequiredInt is required")

	// ErrRequiredArrayRequiredValidation is returned when the RequiredArray is required but not provided.
	ErrRequiredArrayRequiredValidation = errors.New("field RequiredArray is required")

	// ErrRequiredSliceRequiredValidation is returned when the RequiredSlice is required but not provided.
	ErrRequiredSliceRequiredValidation = errors.New("field RequiredSlice is required")

	// ErrRequiredMapRequiredValidation is returned when the RequiredMap is required but not provided.
	ErrRequiredMapRequiredValidation = errors.New("field RequiredMap is required")

	// ErrRequiredInterfaceRequiredValidation is returned when the RequiredInterface is required but not provided.
	ErrRequiredInterfaceRequiredValidation = errors.New("field RequiredInterface is required")

	// ErrRequiredAnyRequiredValidation is returned when the RequiredAny is required but not provided.
	ErrRequiredAnyRequiredValidation = errors.New("field RequiredAny is required")

	// ErrRequiredPointerRequiredValidation is returned when the RequiredPointer is required but not provided.
	ErrRequiredPointerRequiredValidation = errors.New("field RequiredPointer is required")

	// ErrRequiredEntireRequiredStructNameRequiredValidation is returned when the RequiredEntireRequiredStructName is required but not provided.
	ErrRequiredEntireRequiredStructNameRequiredValidation = errors.New("field RequiredEntireRequiredStructName is required")

	// ErrRequiredPartialStructStringRequiredValidation is returned when the RequiredPartialStructString is required but not provided.
	ErrRequiredPartialStructStringRequiredValidation = errors.New("field RequiredPartialStructString is required")

	// ErrRequiredNested2StringRequiredValidation is returned when the RequiredNested2String is required but not provided.
	ErrRequiredNested2StringRequiredValidation = errors.New("field RequiredNested2String is required")

	// ErrRequiredChannelRequiredValidation is returned when the RequiredChannel is required but not provided.
	ErrRequiredChannelRequiredValidation = errors.New("field RequiredChannel is required")

	// ErrRequiredFuncRequiredValidation is returned when the RequiredFunc is required but not provided.
	ErrRequiredFuncRequiredValidation = errors.New("field RequiredFunc is required")

	// ErrRequiredNamedRequiredValidation is returned when the RequiredNamed is required but not provided.
	ErrRequiredNamedRequiredValidation = errors.New("field RequiredNamed is required")
)

func ValidateRequired(t *Required) error {
	if t == nil {
		return ErrNilRequired
	}

	if t.String == "" {
		return ErrRequiredStringRequiredValidation
	}

	if t.Int == 0 {
		return ErrRequiredIntRequiredValidation
	}

	if len(t.Array) == 0 {
		return ErrRequiredArrayRequiredValidation
	}

	if t.Slice == nil {
		return ErrRequiredSliceRequiredValidation
	}

	if t.Map == nil {
		return ErrRequiredMapRequiredValidation
	}

	if t.Interface == nil {
		return ErrRequiredInterfaceRequiredValidation
	}

	if t.Any == nil {
		return ErrRequiredAnyRequiredValidation
	}

	if t.Pointer == nil {
		return ErrRequiredPointerRequiredValidation
	}

	{
		t := t.EntireRequiredStruct

		if t.EntireRequiredStructName == "" {
			return ErrRequiredEntireRequiredStructNameRequiredValidation
		}

	}

	{
		t := t.PartialStruct

		if t.PartialStructString == "" {
			return ErrRequiredPartialStructStringRequiredValidation
		}

	}

	{
		t := t.NestedStruct.Nested2

		if t.Nested2String == "" {
			return ErrRequiredNested2StringRequiredValidation
		}

	}

	{
		t := t.OtherNestedStruct.Nested2

		if t.Nested2String == "" {
			return ErrRequiredNested2StringRequiredValidation
		}

	}

	if t.Channel == nil {
		return ErrRequiredChannelRequiredValidation
	}

	if t.Func == nil {
		return ErrRequiredFuncRequiredValidation
	}

	if t.Named == "" {
		return ErrRequiredNamedRequiredValidation
	}

	return nil
}
