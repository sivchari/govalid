// Code generated by govalid; DO NOT EDIT.
package cel

import (
	"errors"
	"fmt"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
	"regexp"
	"slices"
	"strconv"
	"strings"
	"time"
)

var (
	// ErrNilCEL is returned when the CEL is nil.
	ErrNilCEL = errors.New("input CEL is nil")

	// ErrCELAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAgeCELValidation = govaliderrors.ValidationError{Reason: "field CELAge failed CEL validation: value >= 18"}

	// ErrCELScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELScoreCELValidation = govaliderrors.ValidationError{Reason: "field CELScore failed CEL validation: value > 0.0"}

	// ErrCELMaxScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMaxScoreCELValidation = govaliderrors.ValidationError{Reason: "field CELMaxScore failed CEL validation: value <= 100"}

	// ErrCELLimitCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELLimitCELValidation = govaliderrors.ValidationError{Reason: "field CELLimit failed CEL validation: value < 1000"}

	// ErrCELAnswerCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAnswerCELValidation = govaliderrors.ValidationError{Reason: "field CELAnswer failed CEL validation: value == 42"}

	// ErrCELNonZeroCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNonZeroCELValidation = govaliderrors.ValidationError{Reason: "field CELNonZero failed CEL validation: value != 0"}

	// ErrCELNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNameCELValidation = govaliderrors.ValidationError{Reason: "field CELName failed CEL validation: size(value) > 0"}

	// ErrCELUsernameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELUsernameCELValidation = govaliderrors.ValidationError{Reason: "field CELUsername failed CEL validation: size(value) >= 3 && size(value) <= 50"}

	// ErrCELPrefixedNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPrefixedNameCELValidation = govaliderrors.ValidationError{Reason: "field CELPrefixedName failed CEL validation: value.startsWith('prefix_')"}

	// ErrCELEmailCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELEmailCELValidation = govaliderrors.ValidationError{Reason: "field CELEmail failed CEL validation: value.endsWith('.com')"}

	// ErrCELEmailAddressCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELEmailAddressCELValidation = govaliderrors.ValidationError{Reason: "field CELEmailAddress failed CEL validation: value.contains('@')"}

	// ErrCELIsActiveCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELIsActiveCELValidation = govaliderrors.ValidationError{Reason: "field CELIsActive failed CEL validation: value == true"}

	// ErrCELMustBeTrueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMustBeTrueCELValidation = govaliderrors.ValidationError{Reason: "field CELMustBeTrue failed CEL validation: value != false"}

	// ErrCELValidAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELValidAgeCELValidation = govaliderrors.ValidationError{Reason: "field CELValidAge failed CEL validation: value >= 0 && value <= 120"}

	// ErrCELPercentageCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPercentageCELValidation = govaliderrors.ValidationError{Reason: "field CELPercentage failed CEL validation: value > 0.0 && value <= 100.0"}

	// ErrCELPasswordCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPasswordCELValidation = govaliderrors.ValidationError{Reason: "field CELPassword failed CEL validation: size(value) >= 8 && size(value) <= 256"}

	// ErrCELMinAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMinAgeCELValidation = govaliderrors.ValidationError{Reason: "field CELMinAge failed CEL validation: value >= this.Age"}

	// ErrCELCurrentScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELCurrentScoreCELValidation = govaliderrors.ValidationError{Reason: "field CELCurrentScore failed CEL validation: value <= this.MaxScore"}

	// ErrCELLongNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELLongNameCELValidation = govaliderrors.ValidationError{Reason: "field CELLongName failed CEL validation: size(value) >= size(this.Name)"}

	// ErrCELMiddleValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMiddleValueCELValidation = govaliderrors.ValidationError{Reason: "field CELMiddleValue failed CEL validation: value > this.Age && value < this.Limit"}

	// ErrCELDoubleAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELDoubleAgeCELValidation = govaliderrors.ValidationError{Reason: "field CELDoubleAge failed CEL validation: value >= this.Age * 2"}

	// ErrCELHalfScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHalfScoreCELValidation = govaliderrors.ValidationError{Reason: "field CELHalfScore failed CEL validation: value <= this.MaxScore / 2"}

	// ErrCELSumValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELSumValueCELValidation = govaliderrors.ValidationError{Reason: "field CELSumValue failed CEL validation: value == this.Age + this.NonZero"}

	// ErrCELSpecialAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELSpecialAgeCELValidation = govaliderrors.ValidationError{Reason: "field CELSpecialAge failed CEL validation: (value >= 18 && value <= 65) || value == 100"}

	// ErrCELConditionalValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELConditionalValueCELValidation = govaliderrors.ValidationError{Reason: "field CELConditionalValue failed CEL validation: value > 0 || (value == 0 && this.IsActive)"}

	// ErrCELProperNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELProperNameCELValidation = govaliderrors.ValidationError{Reason: "field CELProperName failed CEL validation: value.matches('^[A-Z][a-z]+$')"}

	// ErrCELItemsCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELItemsCELValidation = govaliderrors.ValidationError{Reason: "field CELItems failed CEL validation: size(value) >= 1 && size(value) <= 10"}

	// ErrCELNonEmptySliceCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNonEmptySliceCELValidation = govaliderrors.ValidationError{Reason: "field CELNonEmptySlice failed CEL validation: size(value) > 0"}

	// ErrCELPositiveValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPositiveValueCELValidation = govaliderrors.ValidationError{Reason: "field CELPositiveValue failed CEL validation: value > 0"}

	// ErrCELHasAdminRoleCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasAdminRoleCELValidation = govaliderrors.ValidationError{Reason: "field CELHasAdminRole failed CEL validation: 'admin' in value"}

	// ErrCELAgeFromStringCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAgeFromStringCELValidation = govaliderrors.ValidationError{Reason: "field CELAgeFromString failed CEL validation: int(value) >= 18"}

	// ErrCELStatusCodeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELStatusCodeCELValidation = govaliderrors.ValidationError{Reason: "field CELStatusCode failed CEL validation: string(value) in ['active', 'inactive', 'pending']"}

	// ErrCELProcessingTimeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELProcessingTimeCELValidation = govaliderrors.ValidationError{Reason: "field CELProcessingTime failed CEL validation: value > duration('1h')"}

	// ErrCELAllNonEmptyCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAllNonEmptyCELValidation = govaliderrors.ValidationError{Reason: "field CELAllNonEmpty failed CEL validation: value.all(item, size(item) > 0)"}

	// ErrCELHasTargetCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasTargetCELValidation = govaliderrors.ValidationError{Reason: "field CELHasTarget failed CEL validation: value.exists(item, item == 'target')"}

	// ErrCELHasUniqueItemCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasUniqueItemCELValidation = govaliderrors.ValidationError{Reason: "field CELHasUniqueItem failed CEL validation: value.exists_one(item, item == 'unique')"}

	// ErrCELAllPrefixedCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAllPrefixedCELValidation = govaliderrors.ValidationError{Reason: "field CELAllPrefixed failed CEL validation: value.all(item, item.startsWith('prefix'))"}

	// ErrCELHasEmailFormatCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasEmailFormatCELValidation = govaliderrors.ValidationError{Reason: "field CELHasEmailFormat failed CEL validation: value.exists(item, item.contains('@'))"}

	// ErrCELFilteredItemsCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELFilteredItemsCELValidation = govaliderrors.ValidationError{Reason: "field CELFilteredItems failed CEL validation: size(value.filter(item, item.startsWith('prefix'))) > 0"}

	// ErrCELMappedSizesCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMappedSizesCELValidation = govaliderrors.ValidationError{Reason: "field CELMappedSizes failed CEL validation: size(value.map(item, size(item))) == size(value)"}
)

func ValidateCEL(t *CEL) error {
	if t == nil {
		return ErrNilCEL
	}

	var errs govaliderrors.ValidationErrors

	if !(t.Age >= 18) {
		err := ErrCELAgeCELValidation
		err.Value = t.Age
		errs = append(errs, err)
	}

	if !(t.Score > 0) {
		err := ErrCELScoreCELValidation
		err.Value = t.Score
		errs = append(errs, err)
	}

	if !(t.MaxScore <= 100) {
		err := ErrCELMaxScoreCELValidation
		err.Value = t.MaxScore
		errs = append(errs, err)
	}

	if !(t.Limit < 1000) {
		err := ErrCELLimitCELValidation
		err.Value = t.Limit
		errs = append(errs, err)
	}

	if !(t.Answer == 42) {
		err := ErrCELAnswerCELValidation
		err.Value = t.Answer
		errs = append(errs, err)
	}

	if !(t.NonZero != 0) {
		err := ErrCELNonZeroCELValidation
		err.Value = t.NonZero
		errs = append(errs, err)
	}

	if !(len(t.Name) > 0) {
		err := ErrCELNameCELValidation
		err.Value = t.Name
		errs = append(errs, err)
	}

	if !((len(t.Username) >= 3) && (len(t.Username) <= 50)) {
		err := ErrCELUsernameCELValidation
		err.Value = t.Username
		errs = append(errs, err)
	}

	if !(strings.HasPrefix(t.PrefixedName, "prefix_")) {
		err := ErrCELPrefixedNameCELValidation
		err.Value = t.PrefixedName
		errs = append(errs, err)
	}

	if !(strings.HasSuffix(t.Email, ".com")) {
		err := ErrCELEmailCELValidation
		err.Value = t.Email
		errs = append(errs, err)
	}

	if !(strings.Contains(t.EmailAddress, "@")) {
		err := ErrCELEmailAddressCELValidation
		err.Value = t.EmailAddress
		errs = append(errs, err)
	}

	if !(t.IsActive == true) {
		err := ErrCELIsActiveCELValidation
		err.Value = t.IsActive
		errs = append(errs, err)
	}

	if !(t.MustBeTrue != false) {
		err := ErrCELMustBeTrueCELValidation
		err.Value = t.MustBeTrue
		errs = append(errs, err)
	}

	if !((t.ValidAge >= 0) && (t.ValidAge <= 120)) {
		err := ErrCELValidAgeCELValidation
		err.Value = t.ValidAge
		errs = append(errs, err)
	}

	if !((t.Percentage > 0) && (t.Percentage <= 100)) {
		err := ErrCELPercentageCELValidation
		err.Value = t.Percentage
		errs = append(errs, err)
	}

	if !((len(t.Password) >= 8) && (len(t.Password) <= 256)) {
		err := ErrCELPasswordCELValidation
		err.Value = t.Password
		errs = append(errs, err)
	}

	if !(t.MinAge >= t.Age) {
		err := ErrCELMinAgeCELValidation
		err.Value = t.MinAge
		errs = append(errs, err)
	}

	if !(t.CurrentScore <= t.MaxScore) {
		err := ErrCELCurrentScoreCELValidation
		err.Value = t.CurrentScore
		errs = append(errs, err)
	}

	if !(len(t.LongName) >= len(t.Name)) {
		err := ErrCELLongNameCELValidation
		err.Value = t.LongName
		errs = append(errs, err)
	}

	if !((t.MiddleValue > t.Age) && (t.MiddleValue < t.Limit)) {
		err := ErrCELMiddleValueCELValidation
		err.Value = t.MiddleValue
		errs = append(errs, err)
	}

	if !(t.DoubleAge >= t.Age*2) {
		err := ErrCELDoubleAgeCELValidation
		err.Value = t.DoubleAge
		errs = append(errs, err)
	}

	if !(t.HalfScore <= t.MaxScore/2) {
		err := ErrCELHalfScoreCELValidation
		err.Value = t.HalfScore
		errs = append(errs, err)
	}

	if !(t.SumValue == t.Age+t.NonZero) {
		err := ErrCELSumValueCELValidation
		err.Value = t.SumValue
		errs = append(errs, err)
	}

	if !(((t.SpecialAge >= 18) && (t.SpecialAge <= 65)) || (t.SpecialAge == 100)) {
		err := ErrCELSpecialAgeCELValidation
		err.Value = t.SpecialAge
		errs = append(errs, err)
	}

	if !((t.ConditionalValue > 0) || ((t.ConditionalValue == 0) && (t.IsActive))) {
		err := ErrCELConditionalValueCELValidation
		err.Value = t.ConditionalValue
		errs = append(errs, err)
	}

	if !(regexp.MustCompile("^[A-Z][a-z]+$").MatchString(t.ProperName)) {
		err := ErrCELProperNameCELValidation
		err.Value = t.ProperName
		errs = append(errs, err)
	}

	if !((len(t.Items) >= 1) && (len(t.Items) <= 10)) {
		err := ErrCELItemsCELValidation
		err.Value = t.Items
		errs = append(errs, err)
	}

	if !(len(t.NonEmptySlice) > 0) {
		err := ErrCELNonEmptySliceCELValidation
		err.Value = t.NonEmptySlice
		errs = append(errs, err)
	}

	if !(t.PositiveValue > 0) {
		err := ErrCELPositiveValueCELValidation
		err.Value = t.PositiveValue
		errs = append(errs, err)
	}

	if !(slices.Contains(t.HasAdminRole, "admin")) {
		err := ErrCELHasAdminRoleCELValidation
		err.Value = t.HasAdminRole
		errs = append(errs, err)
	}

	if !(func() int {
		v, err := strconv.Atoi(t.AgeFromString)
		if err != nil {
			return 0
		}
		return v
	}() >= 18) {
		err := ErrCELAgeFromStringCELValidation
		err.Value = t.AgeFromString
		errs = append(errs, err)
	}

	if !(slices.Contains([]string{"active", "inactive", "pending"}, fmt.Sprintf("%v", t.StatusCode))) {
		err := ErrCELStatusCodeCELValidation
		err.Value = t.StatusCode
		errs = append(errs, err)
	}

	if !(t.ProcessingTime > func() time.Duration {
		d, err := time.ParseDuration("1h")
		if err != nil {
			return 0
		}
		return d
	}()) {
		err := ErrCELProcessingTimeCELValidation
		err.Value = t.ProcessingTime
		errs = append(errs, err)
	}

	if !(func() bool {
		for _, item := range t.AllNonEmpty {
			if !(len(item) > 0) {
				return false
			}
		}
		return true
	}()) {
		err := ErrCELAllNonEmptyCELValidation
		err.Value = t.AllNonEmpty
		errs = append(errs, err)
	}

	if !(func() bool {
		for _, item := range t.HasTarget {
			if item == "target" {
				return true
			}
		}
		return false
	}()) {
		err := ErrCELHasTargetCELValidation
		err.Value = t.HasTarget
		errs = append(errs, err)
	}

	if !(func() bool {
		count := 0
		for _, item := range t.HasUniqueItem {
			if item == "unique" {
				count++
				if count > 1 {
					return false
				}
			}
		}
		return count == 1
	}()) {
		err := ErrCELHasUniqueItemCELValidation
		err.Value = t.HasUniqueItem
		errs = append(errs, err)
	}

	if !(func() bool {
		for _, item := range t.AllPrefixed {
			if !(strings.HasPrefix(item, "prefix")) {
				return false
			}
		}
		return true
	}()) {
		err := ErrCELAllPrefixedCELValidation
		err.Value = t.AllPrefixed
		errs = append(errs, err)
	}

	if !(func() bool {
		for _, item := range t.HasEmailFormat {
			if strings.Contains(item, "@") {
				return true
			}
		}
		return false
	}()) {
		err := ErrCELHasEmailFormatCELValidation
		err.Value = t.HasEmailFormat
		errs = append(errs, err)
	}

	if !(len(func() []interface{} {
		var result []interface{}
		for _, item := range t.FilteredItems {
			if strings.HasPrefix(item, "prefix") {
				result = append(result, item)
			}
		}
		return result
	}()) > 0) {
		err := ErrCELFilteredItemsCELValidation
		err.Value = t.FilteredItems
		errs = append(errs, err)
	}

	if !(len(func() []interface{} {
		var result []interface{}
		for _, item := range t.MappedSizes {
			result = append(result, len(item))
		}
		return result
	}()) == len(t.MappedSizes)) {
		err := ErrCELMappedSizesCELValidation
		err.Value = t.MappedSizes
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
