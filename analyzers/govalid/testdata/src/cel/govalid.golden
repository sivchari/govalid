// Code generated by govalid; DO NOT EDIT.
package cel

import (
	"errors"
	"fmt"
	"regexp"
	"slices"
	"strconv"
	"strings"
	"time"
)

var (
	// ErrNilCEL is returned when the CEL is nil.
	ErrNilCEL = errors.New("input CEL is nil")

	// ErrCELAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAgeCELValidation = errors.New("field CELAge failed CEL validation: value >= 18")

	// ErrCELScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELScoreCELValidation = errors.New("field CELScore failed CEL validation: value > 0.0")

	// ErrCELMaxScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMaxScoreCELValidation = errors.New("field CELMaxScore failed CEL validation: value <= 100")

	// ErrCELLimitCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELLimitCELValidation = errors.New("field CELLimit failed CEL validation: value < 1000")

	// ErrCELAnswerCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAnswerCELValidation = errors.New("field CELAnswer failed CEL validation: value == 42")

	// ErrCELNonZeroCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNonZeroCELValidation = errors.New("field CELNonZero failed CEL validation: value != 0")

	// ErrCELNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNameCELValidation = errors.New("field CELName failed CEL validation: size(value) > 0")

	// ErrCELUsernameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELUsernameCELValidation = errors.New("field CELUsername failed CEL validation: size(value) >= 3 && size(value) <= 50")

	// ErrCELPrefixedNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPrefixedNameCELValidation = errors.New("field CELPrefixedName failed CEL validation: value.startsWith('prefix_')")

	// ErrCELEmailCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELEmailCELValidation = errors.New("field CELEmail failed CEL validation: value.endsWith('.com')")

	// ErrCELEmailAddressCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELEmailAddressCELValidation = errors.New("field CELEmailAddress failed CEL validation: value.contains('@')")

	// ErrCELIsActiveCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELIsActiveCELValidation = errors.New("field CELIsActive failed CEL validation: value == true")

	// ErrCELMustBeTrueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMustBeTrueCELValidation = errors.New("field CELMustBeTrue failed CEL validation: value != false")

	// ErrCELValidAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELValidAgeCELValidation = errors.New("field CELValidAge failed CEL validation: value >= 0 && value <= 120")

	// ErrCELPercentageCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPercentageCELValidation = errors.New("field CELPercentage failed CEL validation: value > 0.0 && value <= 100.0")

	// ErrCELPasswordCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPasswordCELValidation = errors.New("field CELPassword failed CEL validation: size(value) >= 8 && size(value) <= 256")

	// ErrCELMinAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMinAgeCELValidation = errors.New("field CELMinAge failed CEL validation: value >= this.Age")

	// ErrCELCurrentScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELCurrentScoreCELValidation = errors.New("field CELCurrentScore failed CEL validation: value <= this.MaxScore")

	// ErrCELLongNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELLongNameCELValidation = errors.New("field CELLongName failed CEL validation: size(value) >= size(this.Name)")

	// ErrCELMiddleValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMiddleValueCELValidation = errors.New("field CELMiddleValue failed CEL validation: value > this.Age && value < this.Limit")

	// ErrCELDoubleAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELDoubleAgeCELValidation = errors.New("field CELDoubleAge failed CEL validation: value >= this.Age * 2")

	// ErrCELHalfScoreCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHalfScoreCELValidation = errors.New("field CELHalfScore failed CEL validation: value <= this.MaxScore / 2")

	// ErrCELSumValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELSumValueCELValidation = errors.New("field CELSumValue failed CEL validation: value == this.Age + this.NonZero")

	// ErrCELSpecialAgeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELSpecialAgeCELValidation = errors.New("field CELSpecialAge failed CEL validation: (value >= 18 && value <= 65) || value == 100")

	// ErrCELConditionalValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELConditionalValueCELValidation = errors.New("field CELConditionalValue failed CEL validation: value > 0 || (value == 0 && this.IsActive)")

	// ErrCELProperNameCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELProperNameCELValidation = errors.New("field CELProperName failed CEL validation: value.matches('^[A-Z][a-z]+$')")

	// ErrCELItemsCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELItemsCELValidation = errors.New("field CELItems failed CEL validation: size(value) >= 1 && size(value) <= 10")

	// ErrCELNonEmptySliceCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELNonEmptySliceCELValidation = errors.New("field CELNonEmptySlice failed CEL validation: size(value) > 0")

	// ErrCELPositiveValueCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELPositiveValueCELValidation = errors.New("field CELPositiveValue failed CEL validation: value > 0")

	// ErrCELHasAdminRoleCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasAdminRoleCELValidation = errors.New("field CELHasAdminRole failed CEL validation: 'admin' in value")

	// ErrCELAgeFromStringCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAgeFromStringCELValidation = errors.New("field CELAgeFromString failed CEL validation: int(value) >= 18")

	// ErrCELStatusCodeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELStatusCodeCELValidation = errors.New("field CELStatusCode failed CEL validation: string(value) in ['active', 'inactive', 'pending']")

	// ErrCELProcessingTimeCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELProcessingTimeCELValidation = errors.New("field CELProcessingTime failed CEL validation: value > duration('1h')")

	// ErrCELAllNonEmptyCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAllNonEmptyCELValidation = errors.New("field CELAllNonEmpty failed CEL validation: value.all(item, size(item) > 0)")

	// ErrCELHasTargetCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasTargetCELValidation = errors.New("field CELHasTarget failed CEL validation: value.exists(item, item == 'target')")

	// ErrCELHasUniqueItemCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasUniqueItemCELValidation = errors.New("field CELHasUniqueItem failed CEL validation: value.exists_one(item, item == 'unique')")

	// ErrCELAllPrefixedCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELAllPrefixedCELValidation = errors.New("field CELAllPrefixed failed CEL validation: value.all(item, item.startsWith('prefix'))")

	// ErrCELHasEmailFormatCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELHasEmailFormatCELValidation = errors.New("field CELHasEmailFormat failed CEL validation: value.exists(item, item.contains('@'))")

	// ErrCELFilteredItemsCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELFilteredItemsCELValidation = errors.New("field CELFilteredItems failed CEL validation: size(value.filter(item, item.startsWith('prefix'))) > 0")

	// ErrCELMappedSizesCELValidation is the error returned when the CEL expression evaluation fails.
	ErrCELMappedSizesCELValidation = errors.New("field CELMappedSizes failed CEL validation: size(value.map(item, size(item))) == size(value)")
)

func ValidateCEL(t *CEL) error {
	if t == nil {
		return ErrNilCEL
	}

	if !(t.Age >= 18) {
		return ErrCELAgeCELValidation
	}

	if !(t.Score > 0) {
		return ErrCELScoreCELValidation
	}

	if !(t.MaxScore <= 100) {
		return ErrCELMaxScoreCELValidation
	}

	if !(t.Limit < 1000) {
		return ErrCELLimitCELValidation
	}

	if !(t.Answer == 42) {
		return ErrCELAnswerCELValidation
	}

	if !(t.NonZero != 0) {
		return ErrCELNonZeroCELValidation
	}

	if !(len(t.Name) > 0) {
		return ErrCELNameCELValidation
	}

	if !((len(t.Username) >= 3) && (len(t.Username) <= 50)) {
		return ErrCELUsernameCELValidation
	}

	if !(strings.HasPrefix(t.PrefixedName, "prefix_")) {
		return ErrCELPrefixedNameCELValidation
	}

	if !(strings.HasSuffix(t.Email, ".com")) {
		return ErrCELEmailCELValidation
	}

	if !(strings.Contains(t.EmailAddress, "@")) {
		return ErrCELEmailAddressCELValidation
	}

	if !(t.IsActive == true) {
		return ErrCELIsActiveCELValidation
	}

	if !(t.MustBeTrue != false) {
		return ErrCELMustBeTrueCELValidation
	}

	if !((t.ValidAge >= 0) && (t.ValidAge <= 120)) {
		return ErrCELValidAgeCELValidation
	}

	if !((t.Percentage > 0) && (t.Percentage <= 100)) {
		return ErrCELPercentageCELValidation
	}

	if !((len(t.Password) >= 8) && (len(t.Password) <= 256)) {
		return ErrCELPasswordCELValidation
	}

	if !(t.MinAge >= t.Age) {
		return ErrCELMinAgeCELValidation
	}

	if !(t.CurrentScore <= t.MaxScore) {
		return ErrCELCurrentScoreCELValidation
	}

	if !(len(t.LongName) >= len(t.Name)) {
		return ErrCELLongNameCELValidation
	}

	if !((t.MiddleValue > t.Age) && (t.MiddleValue < t.Limit)) {
		return ErrCELMiddleValueCELValidation
	}

	if !(t.DoubleAge >= t.Age*2) {
		return ErrCELDoubleAgeCELValidation
	}

	if !(t.HalfScore <= t.MaxScore/2) {
		return ErrCELHalfScoreCELValidation
	}

	if !(t.SumValue == t.Age+t.NonZero) {
		return ErrCELSumValueCELValidation
	}

	if !(((t.SpecialAge >= 18) && (t.SpecialAge <= 65)) || (t.SpecialAge == 100)) {
		return ErrCELSpecialAgeCELValidation
	}

	if !((t.ConditionalValue > 0) || ((t.ConditionalValue == 0) && (t.IsActive))) {
		return ErrCELConditionalValueCELValidation
	}

	if !(regexp.MustCompile("^[A-Z][a-z]+$").MatchString(t.ProperName)) {
		return ErrCELProperNameCELValidation
	}

	if !((len(t.Items) >= 1) && (len(t.Items) <= 10)) {
		return ErrCELItemsCELValidation
	}

	if !(len(t.NonEmptySlice) > 0) {
		return ErrCELNonEmptySliceCELValidation
	}

	if !(t.PositiveValue > 0) {
		return ErrCELPositiveValueCELValidation
	}

	if !(slices.Contains(t.HasAdminRole, "admin")) {
		return ErrCELHasAdminRoleCELValidation
	}

	if !(func() int {
		v, err := strconv.Atoi(t.AgeFromString)
		if err != nil {
			return 0
		}
		return v
	}() >= 18) {
		return ErrCELAgeFromStringCELValidation
	}

	if !(slices.Contains([]string{"active", "inactive", "pending"}, fmt.Sprintf("%v", t.StatusCode))) {
		return ErrCELStatusCodeCELValidation
	}

	if !(t.ProcessingTime > func() time.Duration {
		d, err := time.ParseDuration("1h")
		if err != nil {
			return 0
		}
		return d
	}()) {
		return ErrCELProcessingTimeCELValidation
	}

	if !(func() bool {
		for _, item := range t.AllNonEmpty {
			if !(len(item) > 0) {
				return false
			}
		}
		return true
	}()) {
		return ErrCELAllNonEmptyCELValidation
	}

	if !(func() bool {
		for _, item := range t.HasTarget {
			if item == "target" {
				return true
			}
		}
		return false
	}()) {
		return ErrCELHasTargetCELValidation
	}

	if !(func() bool {
		count := 0
		for _, item := range t.HasUniqueItem {
			if item == "unique" {
				count++
				if count > 1 {
					return false
				}
			}
		}
		return count == 1
	}()) {
		return ErrCELHasUniqueItemCELValidation
	}

	if !(func() bool {
		for _, item := range t.AllPrefixed {
			if !(strings.HasPrefix(item, "prefix")) {
				return false
			}
		}
		return true
	}()) {
		return ErrCELAllPrefixedCELValidation
	}

	if !(func() bool {
		for _, item := range t.HasEmailFormat {
			if strings.Contains(item, "@") {
				return true
			}
		}
		return false
	}()) {
		return ErrCELHasEmailFormatCELValidation
	}

	if !(len(func() []interface{} {
		var result []interface{}
		for _, item := range t.FilteredItems {
			if strings.HasPrefix(item, "prefix") {
				result = append(result, item)
			}
		}
		return result
	}()) > 0) {
		return ErrCELFilteredItemsCELValidation
	}

	if !(len(func() []interface{} {
		var result []interface{}
		for _, item := range t.MappedSizes {
			result = append(result, len(item))
		}
		return result
	}()) == len(t.MappedSizes)) {
		return ErrCELMappedSizesCELValidation
	}

	return nil
}
