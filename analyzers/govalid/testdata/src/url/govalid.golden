// Code generated by govalid; DO NOT EDIT.
package url

import (
	"errors"
	govaliderrors "github.com/sivchari/govalid/validation/errors"
	"github.com/sivchari/govalid/validation/validationhelper"
)

var (
	// ErrNilURL is returned when the URL is nil.
	ErrNilURL = errors.New("input URL is nil")

	// ErrURLWebsiteURLURLValidation is the error returned when the field is not a valid URL.
	ErrURLWebsiteURLURLValidation = govaliderrors.ValidationError{Reason: "field URLWebsiteURL must be a valid URL"}

	// ErrURLHomepageURLURLValidation is the error returned when the field is not a valid URL.
	ErrURLHomepageURLURLValidation = govaliderrors.ValidationError{Reason: "field URLHomepageURL must be a valid URL"}

	// ErrURLApiURLURLValidation is the error returned when the field is not a valid URL.
	ErrURLApiURLURLValidation = govaliderrors.ValidationError{Reason: "field URLApiURL must be a valid URL"}

	// ErrURLProfileURLURLValidation is the error returned when the field is not a valid URL.
	ErrURLProfileURLURLValidation = govaliderrors.ValidationError{Reason: "field URLProfileURL must be a valid URL"}

	// ErrURLDownloadURLURLValidation is the error returned when the field is not a valid URL.
	ErrURLDownloadURLURLValidation = govaliderrors.ValidationError{Reason: "field URLDownloadURL must be a valid URL"}
)

func ValidateURL(t *URL) error {
	if t == nil {
		return ErrNilURL
	}

	var errs govaliderrors.ValidationErrors

	if !validationhelper.IsValidURL(t.WebsiteURL) {
		err := ErrURLWebsiteURLURLValidation
		err.Value = t.WebsiteURL
		errs = append(errs, err)
	}

	if !validationhelper.IsValidURL(t.HomepageURL) {
		err := ErrURLHomepageURLURLValidation
		err.Value = t.HomepageURL
		errs = append(errs, err)
	}

	if !validationhelper.IsValidURL(t.ApiURL) {
		err := ErrURLApiURLURLValidation
		err.Value = t.ApiURL
		errs = append(errs, err)
	}

	if !validationhelper.IsValidURL(t.ProfileURL) {
		err := ErrURLProfileURLURLValidation
		err.Value = t.ProfileURL
		errs = append(errs, err)
	}

	if !validationhelper.IsValidURL(t.DownloadURL) {
		err := ErrURLDownloadURLURLValidation
		err.Value = t.DownloadURL
		errs = append(errs, err)
	}

	if len(errs) > 0 {
		return errs
	}
	return nil
}
